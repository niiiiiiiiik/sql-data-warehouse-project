-- ============================================================================
-- SILVER LAYER DATA QUALITY & CONSISTENCY CHECKS
-- ============================================================================

-- ======================================================================
-- Section 1: CRM_CUST_INFO
-- ======================================================================

-- 1.1 View Sample Data
SELECT * FROM silver.crm_cust_info LIMIT 10;

-- 1.2 Check for duplicate or NULL primary keys (cst_id)
-- Expectation: No rows returned
SELECT 
    cst_id,
    COUNT(*) AS record_count
FROM silver.crm_cust_info 
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- 1.3 Check for unwanted spaces in character fields
-- Expectation: No rows returned
SELECT cst_firstname
FROM silver.crm_cust_info 
WHERE cst_firstname <> TRIM(cst_firstname);

SELECT cst_lastname
FROM silver.crm_cust_info 
WHERE cst_lastname <> TRIM(cst_lastname);

SELECT cst_gndr
FROM silver.crm_cust_info 
WHERE cst_gndr <> TRIM(cst_gndr);

-- 1.4 Data Consistency and Standardization
-- Check distinct values for gender and marital status
SELECT DISTINCT cst_gndr FROM silver.crm_cust_info;
SELECT DISTINCT cst_marital_status FROM silver.crm_cust_info;

-- ======================================================================
-- Section 2: CRM_PRD_INFO
-- ======================================================================

-- 2.1 View Sample Data
SELECT * FROM silver.crm_prd_info LIMIT 10;

-- 2.2 Check for duplicate primary keys (prd_id)
-- Expectation: No rows returned
SELECT 
    prd_id,
    COUNT(*) AS record_count
FROM silver.crm_prd_info 
GROUP BY prd_id
HAVING COUNT(*) > 1;

-- 2.3 Check for unwanted spaces in product name
SELECT prd_nm
FROM silver.crm_prd_info 
WHERE prd_nm <> TRIM(prd_nm);

-- 2.4 Validate product cost (no NULL or negative values)
SELECT prd_cost
FROM silver.crm_prd_info 
WHERE prd_cost < 0 OR prd_cost IS NULL;

-- 2.5 Data Standardization: Check distinct product lines
SELECT DISTINCT prd_line 
FROM silver.crm_prd_info;

-- 2.6 Verify valid date order: prd_start_dt should not be later than prd_end_dt
SELECT prd_start_dt, prd_end_dt
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt;

-- ======================================================================
-- Section 3: CRM_SALES_DETAILS
-- ======================================================================

-- 3.1 View Sample Data
SELECT * FROM silver.crm_sales_details LIMIT 10;

-- 3.2 Check for unwanted spaces in order numbers (sls_ord_num)
SELECT sls_ord_num
FROM silver.crm_sales_details
WHERE sls_ord_num <> TRIM(sls_ord_num);

-- 3.3 Validate that product keys in sales exist in CRM_PRD_INFO
SELECT 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id
FROM silver.crm_sales_details
WHERE sls_prd_key NOT IN (SELECT prd_key FROM silver.crm_prd_info);

-- 3.4 Validate that customer IDs in sales exist in CRM_CUST_INFO
SELECT 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id
FROM silver.crm_sales_details
WHERE sls_cust_id NOT IN (SELECT cst_id FROM silver.crm_cust_info);

-- 3.5 Validate date fields (since these are now proper DATE types, we check the ranges)
-- For example, check that ship date falls within a plausible range.
SELECT sls_ship_dt
FROM silver.crm_sales_details
WHERE EXTRACT(YEAR FROM sls_ship_dt) NOT BETWEEN 1990 AND 2025;

-- Similarly, validate due date
SELECT sls_due_dt
FROM silver.crm_sales_details
WHERE EXTRACT(YEAR FROM sls_due_dt) NOT BETWEEN 1990 AND 2025;

-- 3.6 Check logical date relationships: order date should not exceed ship or due dates
SELECT 
    sls_ord_num,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_due_dt;

-- 3.7 Validate sales and price calculations:
-- If sls_sales or sls_price are suspect (e.g. NULL, <= 0, or not matching calculation), flag them.
SELECT 
    sls_ord_num,
    sls_sales AS old_sls_sales,
    sls_quantity,
    sls_price AS old_sls_price,
    CASE 
        WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales <> sls_quantity * ABS(sls_price)
            THEN sls_quantity * ABS(sls_price)
        ELSE sls_sales 
    END AS calculated_sls_sales,
    CASE 
        WHEN sls_price IS NULL OR sls_price <= 0
            THEN sls_sales / NULLIF(sls_quantity, 0)
        ELSE sls_price 
    END AS calculated_sls_price
FROM silver.crm_sales_details
WHERE sls_sales IS NULL 
   OR sls_quantity IS NULL 
   OR sls_price IS NULL
   OR sls_sales <= 0 
   OR sls_quantity <= 0 
   OR sls_price <= 0
   OR sls_sales <> sls_quantity * ABS(sls_price);

-- ======================================================================
-- Section 4: ERP_CUST_AZ12
-- ======================================================================

-- 4.1 View Sample Data
SELECT * FROM silver.erp_cust_az12 LIMIT 10;

-- 4.2 Validate customer keys: after removing any 'NAS' prefix, the resulting key should exist in CRM_CUST_INFO
SELECT 
    cid,
    bdate,
    gen
FROM silver.erp_cust_az12
WHERE (CASE 
         WHEN cid LIKE '%NAS%' THEN SUBSTRING(cid, 4, LENGTH(cid))
         ELSE cid 
       END) NOT IN (SELECT DISTINCT cst_key FROM silver.crm_cust_info);

-- 4.3 Validate birth dates: check for dates beyond an acceptable range
SELECT bdate
FROM silver.erp_cust_az12
WHERE bdate < TO_DATE('1947-01-01', 'YYYY-MM-DD')
   OR bdate > TO_DATE('2025-01-01', 'YYYY-MM-DD');

-- ======================================================================
-- Section 5: ERP_LOC_A101
-- ======================================================================

-- 5.1 View Sample Data
SELECT * FROM silver.erp_loc_a101 LIMIT 10;

-- 5.2 Validate that cleaned customer IDs (removing dashes) exist in CRM_CUST_INFO
SELECT 
    REPLACE(cid, '-', '') AS cleaned_cid,
    cntry
FROM silver.erp_loc_a101 
WHERE REPLACE(cid, '-', '') NOT IN (SELECT cst_key FROM silver.crm_cust_info);

-- 5.3 Check for unwanted spaces or inconsistencies in country codes
SELECT cntry
FROM silver.erp_loc_a101 
WHERE cntry <> TRIM(cntry);

-- 5.4 Display distinct country values
SELECT DISTINCT cntry FROM silver.erp_loc_a101;

-- ======================================================================
-- Section 6: ERP_PX_CAT_G1V2
-- ======================================================================

-- 6.1 View Sample Data
SELECT * FROM silver.erp_px_cat_g1v2 LIMIT 10;

-- 6.2 Check for unwanted spaces in category, subcategory, and maintenance fields
SELECT cat, subcat, maintenance
FROM silver.erp_px_cat_g1v2
WHERE cat <> TRIM(cat)
   OR subcat <> TRIM(subcat)
   OR maintenance <> TRIM(maintenance);

-- 6.3 Display distinct values for category, subcategory, and maintenance
SELECT DISTINCT cat FROM silver.erp_px_cat_g1v2;
SELECT DISTINCT subcat FROM silver.erp_px_cat_g1v2;
SELECT DISTINCT maintenance FROM silver.erp_px_cat_g1v2;
