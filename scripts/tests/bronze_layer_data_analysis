-- ============================================================================
-- Data Quality and Analysis Checks for Bronze Data
-- ============================================================================

---------------------------------------------------------
-- Section 1: CRM_CUST_INFO
---------------------------------------------------------

-- 1.1 Check for nulls or duplicates in primary key (cst_id)
-- Expectation: No results returned
SELECT 
    cst_id,
    COUNT(*) AS record_count
FROM bronze.crm_cust_info 
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- 1.2 Check for unwanted spaces in first name, last name, and gender fields
-- Expectation: No results returned

-- Check for extra spaces in first name
SELECT cst_firstname
FROM bronze.crm_cust_info 
WHERE cst_firstname <> TRIM(cst_firstname);

-- Check for extra spaces in last name
SELECT cst_lastname
FROM bronze.crm_cust_info 
WHERE cst_lastname <> TRIM(cst_lastname);

-- Check for extra spaces in gender
SELECT cst_gndr
FROM bronze.crm_cust_info 
WHERE cst_gndr <> TRIM(cst_gndr);

-- 1.3 Data consistency and standardization
-- View distinct values for gender and marital status
SELECT DISTINCT cst_gndr
FROM bronze.crm_cust_info;

SELECT DISTINCT cst_marital_status
FROM bronze.crm_cust_info;


---------------------------------------------------------
-- Section 2: CRM_PRD_INFO
---------------------------------------------------------

-- 2.1 Check for nulls or duplicates in primary key (prd_id)
-- Expectation: No results returned
SELECT 
    prd_id,
    COUNT(*) AS record_count
FROM bronze.crm_prd_info 
GROUP BY prd_id
HAVING COUNT(*) > 1;

-- 2.2 Display transformation logic on product key to verify category and product key extraction
SELECT 
    prd_id,
    prd_key,
    REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id,
    SUBSTRING(prd_key, 7, LENGTH(prd_key)) AS prd_key_extracted,
    prd_nm,
    prd_cost,
    prd_line,
    prd_start_dt,
    prd_end_dt
FROM bronze.crm_prd_info;

-- 2.3 Check for unwanted spaces in product name
SELECT prd_nm
FROM bronze.crm_prd_info 
WHERE prd_nm <> TRIM(prd_nm);

-- 2.4 Check product cost quality (no nulls or negative numbers)
SELECT prd_cost
FROM bronze.crm_prd_info 
WHERE prd_cost < 0 OR prd_cost IS NULL;

-- 2.5 Data standardization for product line
SELECT DISTINCT prd_line 
FROM bronze.crm_prd_info;

-- 2.6 Check for invalid date order (prd_end_dt before prd_start_dt)
SELECT prd_start_dt,
       prd_end_dt
FROM bronze.crm_prd_info
WHERE prd_end_dt < prd_start_dt;


---------------------------------------------------------
-- Section 3: CRM_SALES_DETAILS
---------------------------------------------------------

-- 3.1 Check for unwanted spaces in order number
SELECT 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze.crm_sales_details
WHERE sls_ord_num <> TRIM(sls_ord_num);

-- 3.2 Check that the product key in sales exists in silver.crm_prd_info
SELECT 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze.crm_sales_details
WHERE sls_prd_key NOT IN (SELECT prd_key FROM silver.crm_prd_info);

-- 3.3 Check that the customer id in sales exists in silver.crm_cust_info
SELECT 
    sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
FROM bronze.crm_sales_details
WHERE sls_cust_id NOT IN (SELECT cst_id FROM silver.crm_cust_info);

-- 3.4 Validate date fields for sales (order, ship, and due dates)
-- For ship date
SELECT 
    NULLIF(sls_ship_dt, 0) AS validated_ship_dt
FROM bronze.crm_sales_details
WHERE sls_ship_dt <= 0 
   OR LENGTH(sls_ship_dt::text) <> 8 
   OR sls_ship_dt > 20251212 
   OR sls_ship_dt < 19901212;

-- For due date
SELECT 
    NULLIF(sls_due_dt, 0) AS validated_due_dt
FROM bronze.crm_sales_details
WHERE sls_due_dt <= 0 
   OR LENGTH(sls_due_dt::text) <> 8 
   OR sls_due_dt > 20251212 
   OR sls_due_dt < 19901212;

-- 3.5 Check date relationships: order date should not be later than ship date or due date
SELECT 
    sls_ord_num,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt
FROM bronze.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_due_dt;

-- 3.6 Validate sales and price calculations
SELECT 
    sls_sales AS old_sls_sales,
    sls_quantity,
    sls_price AS old_sls_price,
    CASE 
        WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales <> sls_quantity * ABS(sls_price)
            THEN sls_quantity * ABS(sls_price)
        ELSE sls_sales 
    END AS calculated_sls_sales,
    CASE 
        WHEN sls_price IS NULL OR sls_price <= 0
            THEN sls_sales / NULLIF(sls_quantity, 0)
        ELSE sls_price 
    END AS calculated_sls_price
FROM bronze.crm_sales_details
WHERE sls_sales <> sls_quantity * ABS(sls_price)
   OR sls_sales IS NULL 
   OR sls_quantity IS NULL 
   OR sls_price IS NULL
   OR sls_sales <= 0 
   OR sls_quantity <= 0 
   OR sls_price <= 0;


---------------------------------------------------------
-- Section 4: ERP_CUST_AZ12
---------------------------------------------------------

-- 4.1 Check customer IDs: after removing 'NAS' prefix, they should exist in silver.crm_cust_info
SELECT 
    cid,
    bdate,
    gen
FROM bronze.erp_cust_az12
WHERE CASE 
          WHEN cid LIKE '%NAS%' THEN SUBSTRING(cid, 4, LENGTH(cid))
          ELSE cid 
      END NOT IN (SELECT DISTINCT cst_key FROM silver.crm_cust_info);

-- 4.2 Validate birthdate ranges (e.g., between 1947 and 2025)
SELECT 
    bdate
FROM bronze.erp_cust_az12
WHERE bdate < TO_DATE('1947-01-01', 'YYYY-MM-DD')
   OR bdate > TO_DATE('2025-01-01', 'YYYY-MM-DD');


---------------------------------------------------------
-- Section 5: ERP_LOC_A101
---------------------------------------------------------

-- 5.1 Check that customer IDs (after removing dashes) exist in silver.crm_cust_info
SELECT 
    REPLACE(cid, '-', '') AS cleaned_cid,
    cntry
FROM bronze.erp_loc_a101 
WHERE REPLACE(cid, '-', '') NOT IN (SELECT cst_key FROM silver.crm_cust_info);

-- 5.2 Display distinct country values
SELECT DISTINCT cntry 
FROM bronze.erp_loc_a101;


---------------------------------------------------------
-- Section 6: ERP_PX_CAT_G1V2
---------------------------------------------------------

-- 6.1 Display complete records from ERP_PX_CAT_G1V2
SELECT 
    id,
    cat,
    subcat,
    maintenance
FROM bronze.erp_px_cat_g1v2;

-- 6.2 Check for unwanted spaces in category, subcategory, and maintenance fields
SELECT cat, subcat, maintenance
FROM bronze.erp_px_cat_g1v2
WHERE cat <> TRIM(cat)
   OR subcat <> TRIM(subcat)
   OR maintenance <> TRIM(maintenance);

-- 6.3 Display distinct values for category, subcategory, and maintenance
SELECT DISTINCT cat FROM bronze.erp_px_cat_g1v2;
SELECT DISTINCT subcat FROM bronze.erp_px_cat_g1v2;
SELECT DISTINCT maintenance FROM bronze.erp_px_cat_g1v2;
