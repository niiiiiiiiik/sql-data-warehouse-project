DROP PROCEDURE IF EXISTS silver.load_silver;

CREATE PROCEDURE silver.load_silver()
LANGUAGE plpgsql
AS $$
DECLARE
    batch_start_time TIMESTAMP;
    batch_end_time TIMESTAMP;
BEGIN
    -- Capture batch start time
    batch_start_time := clock_timestamp();
    RAISE NOTICE '================================================';
    RAISE NOTICE 'Loading Silver Layer';
    RAISE NOTICE '================================================';

    BEGIN
        -------------------------------------------------------------------
        -- Load silver.crm_cust_info
        RAISE NOTICE 'Truncating table silver.crm_cust_info';
        EXECUTE 'TRUNCATE TABLE silver.crm_cust_info CASCADE';

        RAISE NOTICE 'Inserting into silver.crm_cust_info';
        EXECUTE '
            INSERT INTO silver.crm_cust_info (
                cst_id, cst_key, cst_firstname, cst_lastname,
                cst_marital_status, cst_gndr, cst_create_date
            )
            SELECT 
                cst_id,
                cst_key,
                TRIM(cst_firstname),
                TRIM(cst_lastname),
                CASE 
                    WHEN UPPER(TRIM(cst_marital_status)) = ''M'' THEN ''Married''
                    WHEN UPPER(TRIM(cst_marital_status)) = ''S'' THEN ''Single''
                    ELSE ''Unknown''
                END,
                CASE 
                    WHEN UPPER(TRIM(cst_gndr)) = ''F'' THEN ''Female''
                    WHEN UPPER(TRIM(cst_gndr)) = ''M'' THEN ''Male''
                    ELSE ''Unknown''
                END,
                cst_create_date
            FROM (
                SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
                FROM bronze.crm_cust_info
                WHERE cst_id IS NOT NULL
            ) t 
            WHERE flag_last = 1
        ';
        RAISE NOTICE 'Inserted into silver.crm_cust_info';

        -------------------------------------------------------------------
        -- Load silver.crm_prd_info
        RAISE NOTICE 'Truncating table silver.crm_prd_info';
        EXECUTE 'TRUNCATE TABLE silver.crm_prd_info CASCADE';

        RAISE NOTICE 'Inserting into silver.crm_prd_info';
        EXECUTE '
            INSERT INTO silver.crm_prd_info (
                prd_id, cat_id, prd_key, prd_nm,
                prd_cost, prd_line, prd_start_dt, prd_end_dt
            )
            SELECT 
                prd_id,
                REPLACE(SUBSTRING(prd_key, 1, 5), ''-'',''_''),
                SUBSTRING(prd_key, 7, LENGTH(prd_key)),
                prd_nm,
                COALESCE(prd_cost::NUMERIC, 0),
                CASE UPPER(TRIM(prd_line))
                    WHEN ''M'' THEN ''Mountain''
                    WHEN ''R'' THEN ''Road''
                    WHEN ''S'' THEN ''Other Sales''
                    WHEN ''T'' THEN ''Touring''
                    ELSE ''Unknown''
                END,
                CAST(prd_start_dt AS DATE),
                CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt) - INTERVAL ''1 day'' AS DATE)
            FROM bronze.crm_prd_info
        ';
        RAISE NOTICE 'Inserted into silver.crm_prd_info';

        -------------------------------------------------------------------
        -- Load silver.crm_sales_details
        RAISE NOTICE 'Truncating table silver.crm_sales_details';
        EXECUTE 'TRUNCATE TABLE silver.crm_sales_details CASCADE';

        RAISE NOTICE 'Inserting into silver.crm_sales_details';
        EXECUTE '
            INSERT INTO silver.crm_sales_details (
                sls_ord_num, sls_prd_key, sls_cust_id,
                sls_order_dt, sls_ship_dt, sls_due_dt,
                sls_sales, sls_quantity, sls_price
            )
            SELECT 
                sls_ord_num,
                sls_prd_key,
                sls_cust_id,
                CASE 
                    WHEN sls_order_dt <= 0 OR LENGTH(sls_order_dt::text) != 8 THEN NULL
                    ELSE TO_DATE(sls_order_dt::text, ''YYYYMMDD'')
                END,
                CASE 
                    WHEN sls_ship_dt <= 0 OR LENGTH(sls_ship_dt::text) != 8 THEN NULL
                    ELSE TO_DATE(sls_ship_dt::text, ''YYYYMMDD'')
                END,
                CASE 
                    WHEN sls_due_dt <= 0 OR LENGTH(sls_due_dt::text) != 8 THEN NULL
                    ELSE TO_DATE(sls_due_dt::text, ''YYYYMMDD'')
                END,
                CASE 
                    WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales <> sls_quantity * ABS(sls_price)
                        THEN sls_quantity * ABS(sls_price)
                    ELSE sls_sales
                END,
                sls_quantity,
                CASE 
                    WHEN sls_price IS NULL OR sls_price <= 0
                        THEN sls_sales / NULLIF(sls_quantity, 0)
                    ELSE sls_price
                END
            FROM bronze.crm_sales_details
        ';
        RAISE NOTICE 'Inserted into silver.crm_sales_details';

        -------------------------------------------------------------------
        -- Load silver.erp_cust_az12
        RAISE NOTICE 'Truncating table silver.erp_cust_az12';
        EXECUTE 'TRUNCATE TABLE silver.erp_cust_az12 CASCADE';

        RAISE NOTICE 'Inserting into silver.erp_cust_az12';
        EXECUTE '
            INSERT INTO silver.erp_cust_az12 (cid, bdate, gen)
            SELECT 
                CASE 
                    WHEN cid LIKE ''%NAS%'' THEN SUBSTRING(cid, 4, LENGTH(cid))
                    ELSE cid 
                END,
                CASE 
                    WHEN bdate > CURRENT_DATE THEN NULL
                    ELSE bdate 
                END,
                CASE 
                    WHEN UPPER(TRIM(gen)) IN (''F'', ''FEMALE'') THEN ''Female''
                    WHEN UPPER(TRIM(gen)) IN (''M'', ''MALE'') THEN ''Male''
                    ELSE ''Unknown''
                END
            FROM bronze.erp_cust_az12
        ';
        RAISE NOTICE 'Inserted into silver.erp_cust_az12';

        -------------------------------------------------------------------
        -- Load silver.erp_loc_a101
        RAISE NOTICE 'Truncating table silver.erp_loc_a101';
        EXECUTE 'TRUNCATE TABLE silver.erp_loc_a101 CASCADE';

        RAISE NOTICE 'Inserting into silver.erp_loc_a101';
        EXECUTE '
            INSERT INTO silver.erp_loc_a101 (cid, cntry)
            SELECT 
                REPLACE(cid, ''-'', ''''),
                CASE 
                    WHEN TRIM(UPPER(cntry)) = ''DE'' THEN ''Germany''
                    WHEN TRIM(UPPER(cntry)) IN (''US'', ''USA'', ''UNITED STATE'', ''UNITED STATES'') THEN ''United States''
                    WHEN TRIM(UPPER(cntry)) IN (''UK'', ''UNITED KINGDOM'') THEN ''United Kingdom''
                    WHEN TRIM(cntry) = '''' OR cntry IS NULL THEN ''N/A''
                    ELSE TRIM(cntry)
                END
            FROM bronze.erp_loc_a101
        ';
        RAISE NOTICE 'Inserted into silver.erp_loc_a101';

        -------------------------------------------------------------------
        -- Load silver.erp_px_cat_g1v2
        RAISE NOTICE 'Truncating table silver.erp_px_cat_g1v2';
        EXECUTE 'TRUNCATE TABLE silver.erp_px_cat_g1v2 CASCADE';

        RAISE NOTICE 'Inserting into silver.erp_px_cat_g1v2';
        EXECUTE '
            INSERT INTO silver.erp_px_cat_g1v2 (id, cat, subcat, maintenance)
            SELECT id, cat, subcat, maintenance
            FROM bronze.erp_px_cat_g1v2
        ';
        RAISE NOTICE 'Inserted into silver.erp_px_cat_g1v2';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '==========================================';
        RAISE NOTICE 'ERROR OCCURRED DURING LOADING SILVER LAYER';
        RAISE NOTICE 'Error Message: %', SQLERRM;
        RAISE NOTICE 'Error SQLSTATE: %', SQLSTATE;
        RAISE NOTICE '==========================================';
        -- Optionally, you can re-raise the exception to propagate it
        RAISE;
    END;

    -- Capture batch end time and display total duration
    batch_end_time := clock_timestamp();
    RAISE NOTICE 'âœ… All transformations and insertions complete!';
    RAISE NOTICE 'Total Load Duration: % seconds', EXTRACT(SECOND FROM batch_end_time - batch_start_time);
END $$;


CALL silver.load_silver();

